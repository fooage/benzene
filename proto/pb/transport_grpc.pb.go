// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PorterClient is the client API for Porter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PorterClient interface {
	// File will be transform as bytes stream and use rpc method.
	MoveFile(ctx context.Context, opts ...grpc.CallOption) (Porter_MoveFileClient, error)
}

type porterClient struct {
	cc grpc.ClientConnInterface
}

func NewPorterClient(cc grpc.ClientConnInterface) PorterClient {
	return &porterClient{cc}
}

func (c *porterClient) MoveFile(ctx context.Context, opts ...grpc.CallOption) (Porter_MoveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Porter_ServiceDesc.Streams[0], "/messier.transport.Porter/MoveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &porterMoveFileClient{stream}
	return x, nil
}

type Porter_MoveFileClient interface {
	Send(*MoveRequest) error
	CloseAndRecv() (*MoveReply, error)
	grpc.ClientStream
}

type porterMoveFileClient struct {
	grpc.ClientStream
}

func (x *porterMoveFileClient) Send(m *MoveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *porterMoveFileClient) CloseAndRecv() (*MoveReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MoveReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PorterServer is the server API for Porter service.
// All implementations must embed UnimplementedPorterServer
// for forward compatibility
type PorterServer interface {
	// File will be transform as bytes stream and use rpc method.
	MoveFile(Porter_MoveFileServer) error
	mustEmbedUnimplementedPorterServer()
}

// UnimplementedPorterServer must be embedded to have forward compatible implementations.
type UnimplementedPorterServer struct {
}

func (UnimplementedPorterServer) MoveFile(Porter_MoveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedPorterServer) mustEmbedUnimplementedPorterServer() {}

// UnsafePorterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PorterServer will
// result in compilation errors.
type UnsafePorterServer interface {
	mustEmbedUnimplementedPorterServer()
}

func RegisterPorterServer(s grpc.ServiceRegistrar, srv PorterServer) {
	s.RegisterService(&Porter_ServiceDesc, srv)
}

func _Porter_MoveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PorterServer).MoveFile(&porterMoveFileServer{stream})
}

type Porter_MoveFileServer interface {
	SendAndClose(*MoveReply) error
	Recv() (*MoveRequest, error)
	grpc.ServerStream
}

type porterMoveFileServer struct {
	grpc.ServerStream
}

func (x *porterMoveFileServer) SendAndClose(m *MoveReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *porterMoveFileServer) Recv() (*MoveRequest, error) {
	m := new(MoveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Porter_ServiceDesc is the grpc.ServiceDesc for Porter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Porter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messier.transport.Porter",
	HandlerType: (*PorterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MoveFile",
			Handler:       _Porter_MoveFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}
