// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatClient interface {
	// Directly query the service health of the server.
	HeartCheck(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error)
	// Monitor the health status of a node and notify another node directly if
	// there is a problem with the server by a stream.
	HeartWatch(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (Heartbeat_HeartWatchClient, error)
}

type heartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatClient(cc grpc.ClientConnInterface) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) HeartCheck(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/messier.heartbeat.Heartbeat/HeartCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartbeatClient) HeartWatch(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (Heartbeat_HeartWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Heartbeat_ServiceDesc.Streams[0], "/messier.heartbeat.Heartbeat/HeartWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartbeatHeartWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Heartbeat_HeartWatchClient interface {
	Recv() (*HeartbeatReply, error)
	grpc.ClientStream
}

type heartbeatHeartWatchClient struct {
	grpc.ClientStream
}

func (x *heartbeatHeartWatchClient) Recv() (*HeartbeatReply, error) {
	m := new(HeartbeatReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartbeatServer is the server API for Heartbeat service.
// All implementations must embed UnimplementedHeartbeatServer
// for forward compatibility
type HeartbeatServer interface {
	// Directly query the service health of the server.
	HeartCheck(context.Context, *HeartbeatRequest) (*HeartbeatReply, error)
	// Monitor the health status of a node and notify another node directly if
	// there is a problem with the server by a stream.
	HeartWatch(*HeartbeatRequest, Heartbeat_HeartWatchServer) error
	mustEmbedUnimplementedHeartbeatServer()
}

// UnimplementedHeartbeatServer must be embedded to have forward compatible implementations.
type UnimplementedHeartbeatServer struct {
}

func (UnimplementedHeartbeatServer) HeartCheck(context.Context, *HeartbeatRequest) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartCheck not implemented")
}
func (UnimplementedHeartbeatServer) HeartWatch(*HeartbeatRequest, Heartbeat_HeartWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartWatch not implemented")
}
func (UnimplementedHeartbeatServer) mustEmbedUnimplementedHeartbeatServer() {}

// UnsafeHeartbeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatServer will
// result in compilation errors.
type UnsafeHeartbeatServer interface {
	mustEmbedUnimplementedHeartbeatServer()
}

func RegisterHeartbeatServer(s grpc.ServiceRegistrar, srv HeartbeatServer) {
	s.RegisterService(&Heartbeat_ServiceDesc, srv)
}

func _Heartbeat_HeartCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServer).HeartCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messier.heartbeat.Heartbeat/HeartCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServer).HeartCheck(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Heartbeat_HeartWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeartbeatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeartbeatServer).HeartWatch(m, &heartbeatHeartWatchServer{stream})
}

type Heartbeat_HeartWatchServer interface {
	Send(*HeartbeatReply) error
	grpc.ServerStream
}

type heartbeatHeartWatchServer struct {
	grpc.ServerStream
}

func (x *heartbeatHeartWatchServer) Send(m *HeartbeatReply) error {
	return x.ServerStream.SendMsg(m)
}

// Heartbeat_ServiceDesc is the grpc.ServiceDesc for Heartbeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Heartbeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messier.heartbeat.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartCheck",
			Handler:    _Heartbeat_HeartCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartWatch",
			Handler:       _Heartbeat_HeartWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "keepalive.proto",
}
